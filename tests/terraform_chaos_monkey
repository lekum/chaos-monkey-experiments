#! /usr/bin/env python3
import subprocess
import os
import shlex
import random
import time

# Params
minutes_between_executions = 1
minutes_between_destroy_and_apply = 1
terraform_path = os.path.realpath("../../infra/")
selector_string = "80"

env = {
        "AWS_ACCESS_KEY_ID": os.getenv("AWS_ACCESS_KEY_ID"),
        "AWS_SECRET_ACCESS_KEY": os.getenv("AWS_SECRET_ACCESS_KEY"),
        "AWS_REGION": os.getenv("AWS_REGION"),
        "PATH": os.getenv("PATH")
      }


def terraform(subcommand):
    """
    Executes "terraform subcommand" and returns the decoded output
    """
    res = subprocess.run("terraform {}".format(subcommand), shell=True, cwd=terraform_path, stdout=subprocess.PIPE, env=env)
    return res.stdout.decode()

def execute_chaos():
    """
    Selects a random resource, and if contains the selector, destroys and recreates it
    """
    state = terraform("state list")
    resource = random.choice(state.splitlines()).strip()
    print("Selected {} as a candidate".format(resource))
    attributes = terraform("state show {}".format(resource))
    print(attributes)
    if selector_string in attributes:
        print("Destroying {}:...".format(resource))
        terraform("destroy -force -target={}".format(resource))
        print("Destruction done. Waiting {} minute(s) before recreating...".format(minutes_between_destroy_and_apply))
        time.sleep(minutes_between_destroy_and_apply * 60)
        terraform("apply -target={}".format(resource))
        print("{} recreated.".format(resource))
    else:
        print("Selector {} not found in resource {}, skipping".format(selector_string, resource))

if __name__ == "__main__":


    while True:
        execute_chaos()
        print("Sleeping {} minute(s)...".format(minutes_between_executions))
        time.sleep(minutes_between_executions * 60)
